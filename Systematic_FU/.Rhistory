spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Merged results across simulations
##################################################
p.psi <- rbind(p.psi.1, p.psi.2, p.psi.3, p.psi.4)
p.lambda <- rbind(p.lambda.1, p.lambda.2, p.lambda.3, p.lambda.4)
##################################################
# Illustrate profile likelihoods
##################################################
spanel <- function(x.vec, dset, parname){
dset <- transform(dset, simulation=factor(simulation))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=param,
y=NLL,
group=simulation,
colour=simulation),
size=1)
gg <- gg+geom_hline(yintercept=CI.line,
linetype='dotted',
colour='gray30',
size=0.75)
gg <- gg+geom_vline(xintercept=x.vec[parname],
linetype='dashed',
colour='gray30',
size=0.75)
xmax <- switch(parname, 'psi'=1, 'lambda'=20, 'w'=0.01, 'beta'=1)
xstep <- switch(parname, 'psi'=0.2, 'lambda'=5, 'w'=0.002, 'beta'=0.2)
gg <- gg+scale_x_continuous(name=parse(text=parname),
breaks=seq(0, xmax, by=xstep),
expand=c(0, 0))
gg <- gg+scale_y_continuous(name='Negative log-likelihood',
breaks=seq(0, 100, by=2),
expand=c(0, 0))
gg <- gg+coord_cartesian(xlim=c(0, xmax), ylim=c(0, 10))
gg <- gg+scale_colour_grey(name='')
return(gg)
}
grid.arrange(spanel(x.vec, p.psi, 'psi'),
spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Merged results across simulations
##################################################
p.psi <- rbind( p.psi.2, p.psi.3)
p.lambda <- rbind( p.lambda.2, p.lambda.3)
##################################################
# Illustrate profile likelihoods
##################################################
spanel <- function(x.vec, dset, parname){
dset <- transform(dset, simulation=factor(simulation))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=param,
y=NLL,
group=simulation,
colour=simulation),
size=1)
gg <- gg+geom_hline(yintercept=CI.line,
linetype='dotted',
colour='gray30',
size=0.75)
gg <- gg+geom_vline(xintercept=x.vec[parname],
linetype='dashed',
colour='gray30',
size=0.75)
xmax <- switch(parname, 'psi'=1, 'lambda'=20, 'w'=0.01, 'beta'=1)
xstep <- switch(parname, 'psi'=0.2, 'lambda'=5, 'w'=0.002, 'beta'=0.2)
gg <- gg+scale_x_continuous(name=parse(text=parname),
breaks=seq(0, xmax, by=xstep),
expand=c(0, 0))
gg <- gg+scale_y_continuous(name='Negative log-likelihood',
breaks=seq(0, 100, by=2),
expand=c(0, 0))
gg <- gg+coord_cartesian(xlim=c(0, xmax), ylim=c(0, 10))
gg <- gg+scale_colour_grey(name='')
return(gg)
}
grid.arrange(spanel(x.vec, p.psi, 'psi'),
spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Merged results across simulations
##################################################
p.psi <- rbind(p.psi.1)
p.lambda <- rbind(p.lambda.1)
#p.psi <- rbind(p.psi.1, p.psi.2, p.psi.3, p.psi.4)
#p.lambda <- rbind(p.lambda.1, p.lambda.2, p.lambda.3, p.lambda.4)
##################################################
# Illustrate profile likelihoods
##################################################
spanel <- function(x.vec, dset, parname){
dset <- transform(dset, simulation=factor(simulation))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=param,
y=NLL,
group=simulation,
colour=simulation),
size=1)
gg <- gg+geom_hline(yintercept=CI.line,
linetype='dotted',
colour='gray30',
size=0.75)
gg <- gg+geom_vline(xintercept=x.vec[parname],
linetype='dashed',
colour='gray30',
size=0.75)
xmax <- switch(parname, 'psi'=1, 'lambda'=20, 'w'=0.01, 'beta'=1)
xstep <- switch(parname, 'psi'=0.2, 'lambda'=5, 'w'=0.002, 'beta'=0.2)
gg <- gg+scale_x_continuous(name=parse(text=parname),
breaks=seq(0, xmax, by=xstep),
expand=c(0, 0))
gg <- gg+scale_y_continuous(name='Negative log-likelihood',
breaks=seq(0, 100, by=2),
expand=c(0, 0))
gg <- gg+coord_cartesian(xlim=c(0, xmax), ylim=c(0, 10))
gg <- gg+scale_colour_grey(name='')
return(gg)
}
grid.arrange(spanel(x.vec, p.psi, 'psi'),
spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Merged results across simulations
##################################################
p.psi <- rbind(p.psi.2)
p.lambda <- rbind(p.lambda.2)
#p.psi <- rbind(p.psi.1, p.psi.2, p.psi.3, p.psi.4)
#p.lambda <- rbind(p.lambda.1, p.lambda.2, p.lambda.3, p.lambda.4)
##################################################
# Illustrate profile likelihoods
##################################################
spanel <- function(x.vec, dset, parname){
dset <- transform(dset, simulation=factor(simulation))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=param,
y=NLL,
group=simulation,
colour=simulation),
size=1)
gg <- gg+geom_hline(yintercept=CI.line,
linetype='dotted',
colour='gray30',
size=0.75)
gg <- gg+geom_vline(xintercept=x.vec[parname],
linetype='dashed',
colour='gray30',
size=0.75)
xmax <- switch(parname, 'psi'=1, 'lambda'=20, 'w'=0.01, 'beta'=1)
xstep <- switch(parname, 'psi'=0.2, 'lambda'=5, 'w'=0.002, 'beta'=0.2)
gg <- gg+scale_x_continuous(name=parse(text=parname),
breaks=seq(0, xmax, by=xstep),
expand=c(0, 0))
gg <- gg+scale_y_continuous(name='Negative log-likelihood',
breaks=seq(0, 100, by=2),
expand=c(0, 0))
gg <- gg+coord_cartesian(xlim=c(0, xmax), ylim=c(0, 10))
gg <- gg+scale_colour_grey(name='')
return(gg)
}
grid.arrange(spanel(x.vec, p.psi, 'psi'),
spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Merged results across simulations
##################################################
p.psi <- rbind(p.psi.1,p.psi.2)
p.lambda <- rbind(p.lambda.1, p.lambda.2)
#p.psi <- rbind(p.psi.1, p.psi.2, p.psi.3, p.psi.4)
#p.lambda <- rbind(p.lambda.1, p.lambda.2, p.lambda.3, p.lambda.4)
##################################################
# Illustrate profile likelihoods
##################################################
spanel <- function(x.vec, dset, parname){
dset <- transform(dset, simulation=factor(simulation))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=param,
y=NLL,
group=simulation,
colour=simulation),
size=1)
gg <- gg+geom_hline(yintercept=CI.line,
linetype='dotted',
colour='gray30',
size=0.75)
gg <- gg+geom_vline(xintercept=x.vec[parname],
linetype='dashed',
colour='gray30',
size=0.75)
xmax <- switch(parname, 'psi'=1, 'lambda'=20, 'w'=0.01, 'beta'=1)
xstep <- switch(parname, 'psi'=0.2, 'lambda'=5, 'w'=0.002, 'beta'=0.2)
gg <- gg+scale_x_continuous(name=parse(text=parname),
breaks=seq(0, xmax, by=xstep),
expand=c(0, 0))
gg <- gg+scale_y_continuous(name='Negative log-likelihood',
breaks=seq(0, 100, by=2),
expand=c(0, 0))
gg <- gg+coord_cartesian(xlim=c(0, xmax), ylim=c(0, 10))
gg <- gg+scale_colour_grey(name='')
return(gg)
}
grid.arrange(spanel(x.vec, p.psi, 'psi'),
spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Fixed simulation study parameters
##################################################
x.vec <- c(psi=0.6, lambda=2, w=0.0025, beta=0.8)
x0 <- c(psi=0.5, lambda=1, w=1/100, beta=0.5)
xl <- c(psi=0, lambda=0, w=0, beta=0)
xu <- c(psi=1, lambda=5, w=5, beta=1)
##################################################
# Simulation 1
##################################################
t.vec <- c(0, 50:54, 54)
set.seed(222)
source('synthetic_data_2017-06-26.r')
p.grid <- pgrid(x.vec, scale.factor=10)
p.like <- plikelihood(x0, xl, xu, t.vec, trial.data, last.screen, p.grid)
p.psi.1 <- pframe(p.grid, p.like, 'psi', 1)
p.lambda.1 <- pframe(p.grid, p.like, 'lambda', 1)
##################################################
# Simulation 2
##################################################
t.vec <- c(0, 50:54, 56)
set.seed(222)
source('synthetic_data_2017-06-26.r')
p.grid <- pgrid(x.vec, scale.factor=10)
p.like <- plikelihood(x0, xl, xu, t.vec, trial.data, last.screen, p.grid)
p.psi.2 <- pframe(p.grid, p.like, 'psi', 2)
p.lambda.2 <- pframe(p.grid, p.like, 'lambda', 2)
##################################################
# Simulation 3
##################################################
t.vec <- c(0, 50:54, 58)
set.seed(222)
source('synthetic_data_2017-06-26.r')
p.grid <- pgrid(x.vec, scale.factor=10)
p.like <- plikelihood(x0, xl, xu, t.vec, trial.data, last.screen, p.grid)
p.psi.3 <- pframe(p.grid, p.like, 'psi', 3)
p.lambda.3 <- pframe(p.grid, p.like, 'lambda', 3)
##################################################
# Simulation 4
##################################################
t.vec <- c(0, 50:54, 60)
set.seed(222)
source('synthetic_data_2017-06-26.r')
p.grid <- pgrid(x.vec, scale.factor=10)
p.like <- plikelihood(x0, xl, xu, t.vec, trial.data, last.screen, p.grid)
p.psi.4 <- pframe(p.grid, p.like, 'psi', 4)
p.lambda.4 <- pframe(p.grid, p.like, 'lambda', 4)
##################################################
# Merged results across simulations
##################################################
p.psi <- rbind(p.psi.1, p.psi.2, p.psi.3, p.psi.4)
p.lambda <- rbind(p.lambda.1, p.lambda.2, p.lambda.3, p.lambda.4)
##################################################
# Illustrate profile likelihoods
##################################################
spanel <- function(x.vec, dset, parname){
dset <- transform(dset, simulation=factor(simulation))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=param,
y=NLL,
group=simulation,
colour=simulation),
size=1)
gg <- gg+geom_hline(yintercept=CI.line,
linetype='dotted',
colour='gray30',
size=0.75)
gg <- gg+geom_vline(xintercept=x.vec[parname],
linetype='dashed',
colour='gray30',
size=0.75)
xmax <- switch(parname, 'psi'=1, 'lambda'=20, 'w'=0.01, 'beta'=1)
xstep <- switch(parname, 'psi'=0.2, 'lambda'=5, 'w'=0.002, 'beta'=0.2)
gg <- gg+scale_x_continuous(name=parse(text=parname),
breaks=seq(0, xmax, by=xstep),
expand=c(0, 0))
gg <- gg+scale_y_continuous(name='Negative log-likelihood',
breaks=seq(0, 100, by=2),
expand=c(0, 0))
gg <- gg+coord_cartesian(xlim=c(0, xmax), ylim=c(0, 10))
gg <- gg+scale_colour_grey(name='')
return(gg)
}
grid.arrange(spanel(x.vec, p.psi, 'psi'),
spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Fixed simulation study parameters
##################################################
x.vec <- c(psi=0.6, lambda=2, w=0.0025, beta=0.8)
x0 <- c(psi=0.5, lambda=1, w=1/100, beta=0.5)
xl <- c(psi=0, lambda=0, w=0, beta=0)
xu <- c(psi=1, lambda=5, w=5, beta=1)
##################################################
# Simulation 1
##################################################
t.vec <- c(0, 50:54, 54)
set.seed(444)
source('synthetic_data_2017-06-26.r')
p.grid <- pgrid(x.vec, scale.factor=10)
p.like <- plikelihood(x0, xl, xu, t.vec, trial.data, last.screen, p.grid)
p.psi.1 <- pframe(p.grid, p.like, 'psi', 1)
p.lambda.1 <- pframe(p.grid, p.like, 'lambda', 1)
##################################################
# Simulation 2
##################################################
t.vec <- c(0, 50:54, 56)
set.seed(444)
source('synthetic_data_2017-06-26.r')
p.grid <- pgrid(x.vec, scale.factor=10)
p.like <- plikelihood(x0, xl, xu, t.vec, trial.data, last.screen, p.grid)
p.psi.2 <- pframe(p.grid, p.like, 'psi', 2)
p.lambda.2 <- pframe(p.grid, p.like, 'lambda', 2)
##################################################
# Simulation 3
##################################################
t.vec <- c(0, 50:54, 58)
set.seed(444)
source('synthetic_data_2017-06-26.r')
p.grid <- pgrid(x.vec, scale.factor=10)
p.like <- plikelihood(x0, xl, xu, t.vec, trial.data, last.screen, p.grid)
p.psi.3 <- pframe(p.grid, p.like, 'psi', 3)
p.lambda.3 <- pframe(p.grid, p.like, 'lambda', 3)
##################################################
# Simulation 4
##################################################
t.vec <- c(0, 50:54, 60)
set.seed(444)
source('synthetic_data_2017-06-26.r')
p.grid <- pgrid(x.vec, scale.factor=10)
p.like <- plikelihood(x0, xl, xu, t.vec, trial.data, last.screen, p.grid)
p.psi.4 <- pframe(p.grid, p.like, 'psi', 4)
p.lambda.4 <- pframe(p.grid, p.like, 'lambda', 4)
##################################################
# Merged results across simulations
##################################################
p.psi <- rbind(p.psi.1, p.psi.2, p.psi.3, p.psi.4)
p.lambda <- rbind(p.lambda.1, p.lambda.2, p.lambda.3, p.lambda.4)
##################################################
# Illustrate profile likelihoods
##################################################
spanel <- function(x.vec, dset, parname){
dset <- transform(dset, simulation=factor(simulation))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=param,
y=NLL,
group=simulation,
colour=simulation),
size=1)
gg <- gg+geom_hline(yintercept=CI.line,
linetype='dotted',
colour='gray30',
size=0.75)
gg <- gg+geom_vline(xintercept=x.vec[parname],
linetype='dashed',
colour='gray30',
size=0.75)
xmax <- switch(parname, 'psi'=1, 'lambda'=20, 'w'=0.01, 'beta'=1)
xstep <- switch(parname, 'psi'=0.2, 'lambda'=5, 'w'=0.002, 'beta'=0.2)
gg <- gg+scale_x_continuous(name=parse(text=parname),
breaks=seq(0, xmax, by=xstep),
expand=c(0, 0))
gg <- gg+scale_y_continuous(name='Negative log-likelihood',
breaks=seq(0, 100, by=2),
expand=c(0, 0))
gg <- gg+coord_cartesian(xlim=c(0, xmax), ylim=c(0, 10))
gg <- gg+scale_colour_grey(name='')
return(gg)
}
grid.arrange(spanel(x.vec, p.psi, 'psi'),
spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Read saved results of simulations achieving API
##################################################
load(file.path(loadpath, 'Systematic_FU', 'Systematic_FU_psi_p4.RData'))
psi.p4 <- data.frame(psi=0.4, api=result_mat$IdM)
load(file.path(loadpath, 'Systematic_FU', 'Systematic_FU_psi_p6.RData'))
psi.p6 <- data.frame(psi=0.6, api=result_mat$IdM)
load(file.path(loadpath, 'Systematic_FU', 'Systematic_FU_psi_p8.RData'))
psi.p8 <- data.frame(psi=0.8, api=result_mat$IdM)
psi.dat <- rbind(psi.p4, psi.p6, psi.p8)
##################################################
# Calculate follow-up since final screen using
# time vector excluding last entry
##################################################
screen.vec <- c(20, 50:54)
fu.years <- FU.bound-screen.vec[length(screen.vec)]
psi.dat <- cbind(psi.dat, fu.years)
##################################################
# Illustrate simulations achieving API
##################################################
apanel <- function(dset){
dset <- transform(dset, psi=factor(psi))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=fu.years,
y=api/100,
group=psi,
colour=psi),
size=1)
gg <- gg+geom_point(aes(x=fu.years,
y=api/100,
group=psi,
colour=psi),
size=4)
gg <- gg+scale_x_continuous(name='Years of follow-up after last screen',
limits=c(0, 14),
breaks=seq(0, 14, by=2))
gg <- gg+scale_y_continuous(name='Runs achieving API',
breaks=seq(0, 1, by=0.2),
labels=percent_format())
gg <- gg+scale_colour_grey()
return(gg)
}
print(apanel(psi.dat))
##################################################
# Merged results across simulations
##################################################
p.psi <- rbind(p.psi.1, p.psi.2, p.psi.3, p.psi.4)
p.lambda <- rbind(p.lambda.1, p.lambda.2, p.lambda.3, p.lambda.4)
##################################################
# Illustrate profile likelihoods
##################################################
spanel <- function(x.vec, dset, parname){
dset <- transform(dset, simulation=factor(simulation))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=param,
y=NLL,
group=simulation,
colour=simulation),
size=1)
gg <- gg+geom_hline(yintercept=CI.line,
linetype='dotted',
colour='gray30',
size=0.75)
gg <- gg+geom_vline(xintercept=x.vec[parname],
linetype='dashed',
colour='gray30',
size=0.75)
xmax <- switch(parname, 'psi'=1, 'lambda'=20, 'w'=0.01, 'beta'=1)
xstep <- switch(parname, 'psi'=0.2, 'lambda'=5, 'w'=0.002, 'beta'=0.2)
gg <- gg+scale_x_continuous(name=parse(text=parname),
breaks=seq(0, xmax, by=xstep),
expand=c(0, 0))
gg <- gg+scale_y_continuous(name='Negative log-likelihood',
breaks=seq(0, 100, by=2),
expand=c(0, 0))
gg <- gg+coord_cartesian(xlim=c(0, xmax), ylim=c(-.5, 10))
gg <- gg+scale_colour_grey(name='')
return(gg)
}
grid.arrange(spanel(x.vec, p.psi, 'psi'),
spanel(x.vec, p.lambda, 'lambda'),
layout_matrix=matrix(c(1, 2), ncol=2, byrow=TRUE))
##################################################
# Read saved results of simulations achieving API
##################################################
load(file.path(loadpath, 'Systematic_FU', 'Systematic_FU_psi_p4.RData'))
psi.p4 <- data.frame(psi=0.4, api=result_mat$IdM)
load(file.path(loadpath, 'Systematic_FU', 'Systematic_FU_psi_p6.RData'))
psi.p6 <- data.frame(psi=0.6, api=result_mat$IdM)
load(file.path(loadpath, 'Systematic_FU', 'Systematic_FU_psi_p8.RData'))
psi.p8 <- data.frame(psi=0.8, api=result_mat$IdM)
psi.dat <- rbind(psi.p4, psi.p6, psi.p8)
##################################################
# Calculate follow-up since final screen using
# time vector excluding last entry
##################################################
screen.vec <- c(20, 50:54)
fu.years <- FU.bound-screen.vec[length(screen.vec)]
psi.dat <- cbind(psi.dat, fu.years)
##################################################
# Illustrate simulations achieving API
##################################################
apanel <- function(dset){
dset <- transform(dset, psi=factor(psi))
gg_theme(legend.position='none')
gg <- ggplot(data=dset)
gg <- gg+geom_line(aes(x=fu.years,
y=api/100,
group=psi,
colour=psi),
size=1)
gg <- gg+geom_point(aes(x=fu.years,
y=api/100,
group=psi,
colour=psi),
size=4)
gg <- gg+scale_x_continuous(name='Years of follow-up after last screen',
limits=c(0, 14),
breaks=seq(0, 14, by=2))
gg <- gg+scale_y_continuous(name='Runs achieving API',
breaks=seq(0, 1, by=0.2),
labels=percent_format())
gg <- gg+scale_colour_grey()
return(gg)
}
print(apanel(psi.dat))
setwd("~/ownCloud/DCIS/Fred_Hutch/Paper_Simulations/Exponential_v5/Systematic_FU")
source('~/ownCloud/DCIS/Fred_Hutch/Paper_Simulations/Exponential_v5/Systematic_FU/systematic_FU.R', echo=TRUE)
